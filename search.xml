<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AC自动机</title>
    <url>/2024/02/13/AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h3><p>本质是在$tire$树上做$kmp$</p>
<p>普通$kmp$可以看作链式的AC自动机</p>
<p>AC自动机由链变为树，使用$bfs$遍历</p>
<p><a class="link"   href="https://www.luogu.com.cn/problem/P5357" >洛谷P5357 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">AhoCorasick</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> fail;</span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : fail&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    std::vector&lt;Node&gt; tr;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">AhoCorasick</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tr.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        tr[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">        tr[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tr.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> tr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt; &amp;a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tr[p].next[x]) &#123;</span><br><span class="line">                tr[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                tr[tr[p].next[x]].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = tr[p].next[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string &amp;s, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">b</span><span class="params">(s.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            b[i] = s[i] - offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> x = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; ALPHABET; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!tr[x].next[i]) &#123;</span><br><span class="line">                    tr[x].next[i] = tr[tr[x].fail].next[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tr[tr[x].next[i]].fail = tr[tr[x].fail].next[i];</span><br><span class="line">                    q.<span class="built_in">push</span>(tr[x].next[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(p, c - <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">link</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[p].fail;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[p].len;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Dijstra</title>
    <url>/2024/01/25/Dijstra/</url>
    <content><![CDATA[<h3 id="朴素版"><a href="#朴素版" class="headerlink" title="朴素版"></a>朴素版</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dijstra_</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">		<span class="type">int</span> w;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> len;</span><br><span class="line">	std::vector&lt;std::vector&lt;node&gt;&gt; mp;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; dist;</span><br><span class="line">	std::vector&lt;<span class="type">bool</span>&gt; st;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Dijstra_</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">Dijstra_</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">		<span class="built_in">init</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">		len = n;</span><br><span class="line">		mp.<span class="built_in">resize</span>(n);</span><br><span class="line">		dist.<span class="built_in">resize</span>(len, INF);</span><br><span class="line">		st.<span class="built_in">resize</span>(len, <span class="number">0</span>);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">			mp[i].<span class="built_in">resize</span>(n, &#123;INF&#125;);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">		mp[u][v].w = std::<span class="built_in">min</span>(mp[u][v].w, w);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dijstra</span><span class="params">(<span class="type">int</span> start = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">		dist.<span class="built_in">assign</span>(len, INF);</span><br><span class="line">		st.<span class="built_in">assign</span>(len, <span class="number">0</span>);</span><br><span class="line">		dist[start] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">			<span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[j] &lt; dist[t])) &#123;</span><br><span class="line">					t = j;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			st[t] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">				dist[j] = std::<span class="built_in">min</span>(dist[j], dist[t] + mp[t][j].w);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h3 id="堆优化版"><a href="#堆优化版" class="headerlink" title="堆优化版"></a>堆优化版</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dijstra</span> &#123;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">		<span class="type">int</span> to, w;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">he</span> &#123;</span><br><span class="line">		<span class="type">int</span> id, dis;</span><br><span class="line"></span><br><span class="line">		<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> he other) <span class="type">const</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span> -&gt; dis &gt; other.dis;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">int</span> len;</span><br><span class="line">	std::vector&lt;std::vector&lt;node&gt;&gt; edges;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; dist;</span><br><span class="line">	std::vector&lt;<span class="type">bool</span>&gt; st;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">Dijstra</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">Dijstra</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">		<span class="built_in">init</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">		len = n;</span><br><span class="line">		edges.<span class="built_in">resize</span>(n);</span><br><span class="line">		dist.<span class="built_in">resize</span>(n, INF);</span><br><span class="line">		st.<span class="built_in">resize</span>(n, <span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">		edges[u].<span class="built_in">push_back</span>(&#123;v, w&#125;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">dijstra</span><span class="params">(<span class="type">int</span> start = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">		dist.<span class="built_in">assign</span>(len, INF);</span><br><span class="line">		st.<span class="built_in">assign</span>(len, <span class="number">0</span>);</span><br><span class="line">		dist[start] = <span class="number">0</span>;</span><br><span class="line">		std::priority_queue&lt;he&gt; heap;</span><br><span class="line">		heap.<span class="built_in">push</span>(&#123;start, <span class="number">0</span>&#125;);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">while</span> (heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">			<span class="keyword">auto</span> [u, dis] = heap.<span class="built_in">top</span>();</span><br><span class="line">			heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (st[u]) &#123;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			st[u] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span> [v, w] : edges[u]) &#123;</span><br><span class="line">				<span class="keyword">if</span> (dist[v] &gt; dis + w) &#123;</span><br><span class="line">					dist[v] = dis + w;</span><br><span class="line">					heap.<span class="built_in">push</span>(&#123;v, dist[v]&#125;);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP</title>
    <url>/2024/02/13/KMP/</url>
    <content><![CDATA[<h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><p>例题：<a class="link"   href="https://www.luogu.com.cn/problem/P3375" >洛谷P3375 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>$ne[i]$表示存在最大的$x(x \neq i)$, 使得$t[0:x] &#x3D; t[i - x + 1:i]$</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    std::string S, T;</span><br><span class="line">    <span class="type">int</span> s_len, t_len;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; ne;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; pos;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">KMP</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">KMP</span>(std::string&amp; s, std::string&amp; t) &#123;</span><br><span class="line">        <span class="built_in">init</span>(s, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(std::string&amp; s, std::string&amp; t)</span> </span>&#123;</span><br><span class="line">        S = s;</span><br><span class="line">        T = t;</span><br><span class="line">        s_len = S.<span class="built_in">size</span>();</span><br><span class="line">        t_len = T.<span class="built_in">size</span>();</span><br><span class="line">        ne.<span class="built_in">resize</span>(t_len, <span class="number">0</span>);</span><br><span class="line">        pos.<span class="built_in">clear</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">()</span> </span>&#123; <span class="comment">// 求next数组</span></span><br><span class="line">        ne[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt; t_len; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; T[j] != T[i]) &#123;</span><br><span class="line">                j = ne[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!j &amp;&amp; T[j] != T[i]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j ++ ;</span><br><span class="line">            ne[i] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_pos</span><span class="params">()</span> </span>&#123; <span class="comment">// 求出现位置</span></span><br><span class="line">        <span class="built_in">get_next</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; S.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (j &amp;&amp; S[i] != T[j]) &#123;</span><br><span class="line">                j = ne[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!j &amp;&amp; S[i] != T[j]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            j ++ ;</span><br><span class="line">            <span class="keyword">if</span> (j == t_len) &#123;</span><br><span class="line">                pos.<span class="built_in">push_back</span>(i - j + <span class="number">1</span>);</span><br><span class="line">                j = ne[j - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>DP</title>
    <url>/2024/01/14/DP/</url>
    <content><![CDATA[<h3 id="数位DP"><a href="#数位DP" class="headerlink" title="数位DP"></a>数位DP</h3><p><a class="link"   href="https://www.luogu.com.cn/problem/P2602" >洛谷P2602 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><code>dp[n][n][2][2]</code>: pos, cnt, is_zero, is_limit</p>
<p>pos: 在哪一位</p>
<p>cnt: 这个数多少个要求数位 </p>
<p>is_zero: true为前面全是前导0</p>
<p>is_limit: true为有约束限制，即本位最高多少</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">calc</span><span class="params">(LL x, <span class="type">int</span> dight)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> s = std::<span class="built_in">to_string</span>(x);</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">std::vector <span class="title">dp</span><span class="params">(n, std::vector(n, std::vector(<span class="number">2</span>, std::vector&lt;LL&gt;(<span class="number">2</span>, <span class="number">-1</span>))))</span></span>;</span><br><span class="line">    <span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> self, <span class="type">int</span> pos, LL cnt, <span class="type">bool</span> is_limit, <span class="type">bool</span> is_zero) -&gt; LL &#123;</span><br><span class="line">        <span class="keyword">if</span> (pos == n) &#123;</span><br><span class="line">            <span class="keyword">return</span> cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dp[pos][cnt][is_zero][is_limit] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[pos][cnt][is_zero][is_limit];</span><br><span class="line">        &#125;</span><br><span class="line">        LL ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= (is_limit ? s[pos] - <span class="string">&#x27;0&#x27;</span> : <span class="number">9</span>); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_zero &amp;&amp; i == <span class="number">0</span>) &#123;</span><br><span class="line">                ans += <span class="built_in">self</span>(self, pos + <span class="number">1</span>, cnt, is_limit &amp;&amp; i == s[pos] - <span class="string">&#x27;0&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += <span class="built_in">self</span>(self, pos + <span class="number">1</span>, cnt + (i == dight), is_limit &amp;&amp; i == s[pos] - <span class="string">&#x27;0&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[pos][cnt][is_zero][is_limit] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dfs</span>(dfs, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LL l, r;</span><br><span class="line">    std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">calc</span>(r, i) - <span class="built_in">calc</span>(l - <span class="number">1</span>, i) &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == <span class="number">9</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>SCC</title>
    <url>/2023/11/28/SCC/</url>
    <content><![CDATA[<h3 id="SCC-缩点"><a href="#SCC-缩点" class="headerlink" title="SCC(缩点)"></a>SCC(缩点)</h3><p><a class="link"   href="https://www.luogu.com.cn/problem/P3387" >洛谷P3387 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SCC</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; edges; <span class="comment">// 边</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; stk; <span class="comment">// 栈</span></span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; dfn, low, bel; <span class="comment">// 公共祖先，强连通分量</span></span><br><span class="line">    <span class="type">int</span> cur, cnt; <span class="comment">// cur: dfn序，cnt: 强连通分量数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">SCC</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">SCC</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span> -&gt; n = n;</span><br><span class="line">        edges.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">        stk.<span class="built_in">clear</span>();</span><br><span class="line">        dfn.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        low.<span class="built_in">resize</span>(n);</span><br><span class="line">        bel.<span class="built_in">assign</span>(n, <span class="number">-1</span>);</span><br><span class="line">        cur = cnt = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        edges[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        dfn[x] = low[x] = cur ++ ;</span><br><span class="line">        stk.<span class="built_in">push_back</span>(x);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> y : edges[x]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(y);</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], low[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bel[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">                low[x] = std::<span class="built_in">min</span>(low[x], dfn[y]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dfn[x] == low[x]) &#123;</span><br><span class="line">            <span class="type">int</span> y;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                y = stk.<span class="built_in">back</span>();</span><br><span class="line">                bel[y] = cnt;</span><br><span class="line">                stk.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125; <span class="keyword">while</span> (y != x);</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dfn[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">SCC <span class="title">g</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        std::cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u -- ;</span><br><span class="line">        v -- ;</span><br><span class="line">        g.<span class="built_in">addEdge</span>(u, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> bel = g.<span class="built_in">work</span>();</span><br><span class="line">    <span class="type">int</span> cnt = g.cnt;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">edges</span>(n);</span><br><span class="line">    <span class="function">std::vector&lt;LL&gt; <span class="title">z</span><span class="params">(cnt)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        z[bel[i]] += a[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : g.edges[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bel[i] != bel[j]) &#123;</span><br><span class="line">                edges[bel[i]].<span class="built_in">push_back</span>(bel[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">std::vector&lt;LL&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = cnt - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        dp[i] += z[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : edges[i]) &#123;</span><br><span class="line">            dp[j] = std::<span class="built_in">max</span>(dp[j], dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/08/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>xxxxxxxxxx LL calc(LL x, int dight) {    auto s &#x3D; std::to_string(x);    int n &#x3D; s.size();    std::vector dp(n, std::vector(n, std::vector(2, std::vector<LL>(2, -1))));    auto dfs &#x3D; [&amp;](auto self, int pos, LL cnt, bool is_limit, bool is_zero) -&gt; LL {        if (pos &#x3D;&#x3D; n) {            return cnt;        }        if (dp[pos][cnt][is_zero][is_limit] !&#x3D; -1) {            return dp[pos][cnt][is_zero][is_limit];        }        LL ans &#x3D; 0;        for (int i &#x3D; 0; i &lt;&#x3D; (is_limit ? s[pos] - ‘0’ : 9); i++) {            if (is_zero &amp;&amp; i &#x3D;&#x3D; 0) {                ans +&#x3D; self(self, pos + 1, cnt, is_limit &amp;&amp; i &#x3D;&#x3D; s[pos] - ‘0’, true);            } else {                ans +&#x3D; self(self, pos + 1, cnt + (i &#x3D;&#x3D; dight), is_limit &amp;&amp; i &#x3D;&#x3D; s[pos] - ‘0’, false);            }        }        dp[pos][cnt][is_zero][is_limit] &#x3D; ans;        return ans;    };​    return dfs(dfs, 0, 0, true, true);​}​void solve() {    LL l, r;    std::cin &gt;&gt; l &gt;&gt; r;    for (int i &#x3D; 0; i &lt; 10; i++) {        std::cout &lt;&lt; calc(r, i) - calc(l - 1, i) &lt;&lt; “ \n”[i &#x3D;&#x3D; 9];    }}cpp</p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2024/01/22/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DSU</span> &#123;</span><br><span class="line">	std::vector&lt;<span class="type">int</span>&gt; p, siz;</span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">DSU</span>() &#123;&#125;</span><br><span class="line">	<span class="built_in">DSU</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">		<span class="built_in">init</span>(n);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">		num = n;</span><br><span class="line">		p.<span class="built_in">resize</span>(n);</span><br><span class="line">		std::<span class="built_in">iota</span>(p.<span class="built_in">begin</span>(), p.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">		siz.<span class="built_in">assign</span>(n, <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (u != p[u]) &#123;</span><br><span class="line">			p[u] = <span class="built_in">find</span>(p[u]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> p[u];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">same</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">find</span>(u) == <span class="built_in">find</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> fa_u = <span class="built_in">find</span>(u), fa_v = <span class="built_in">find</span>(v);</span><br><span class="line">		<span class="keyword">if</span> (fa_u == fa_v) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		siz[fa_u] += siz[fa_v];</span><br><span class="line">		p[fa_v] = fa_u;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> siz[<span class="built_in">find</span>(u)];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>tire树</title>
    <url>/2023/11/19/tire%E6%A0%91/</url>
    <content><![CDATA[<h3 id="结构体tire树"><a href="#结构体tire树" class="headerlink" title="结构体tire树"></a>结构体tire树</h3><p>例题：<a class="link"   href="https://www.luogu.com.cn/problem/P8306" >洛谷P8306 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Tire</span> &#123;</span><br><span class="line">    <span class="comment">// 小写字母：26， 二进制：2 ... 具体由题</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">int</span> ALPHABET = <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="type">int</span> cnt; <span class="comment">// cnt的定义具体由题，在这是前缀数量</span></span><br><span class="line">        std::array&lt;<span class="type">int</span>, ALPHABET&gt; next;</span><br><span class="line">        <span class="built_in">Node</span>() : cnt&#123;&#125;, next&#123;&#125; &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    std::vector&lt;Node&gt; tr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Tire</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tr.<span class="built_in">assign</span>(<span class="number">2</span>, <span class="built_in">Node</span>());</span><br><span class="line">        tr[<span class="number">0</span>].len = <span class="number">-1</span>;</span><br><span class="line">        tr[<span class="number">0</span>].next.<span class="built_in">fill</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">newNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        tr.<span class="built_in">emplace_back</span>();</span><br><span class="line">        <span class="keyword">return</span> tr.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; a)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> x : a) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!tr[p].next[x]) &#123;</span><br><span class="line">                tr[p].next[x] = <span class="built_in">newNode</span>();</span><br><span class="line">                tr[tr[p].next[x]].len = tr[p].len + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            p = tr[p].next[x];</span><br><span class="line">            tr[p].cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> std::string&amp; s, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(s.size())</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="type">int</span>)s.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            a[i] = s[i] - offset;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果是int就是31, LL是62</span></span><br><span class="line">        <span class="function">std::vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(<span class="number">31</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            a[<span class="number">30</span> - i] = (x &gt;&gt; i &amp; <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">add</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[p].next[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> p, <span class="type">char</span> c, <span class="type">char</span> offset = <span class="string">&#x27;a&#x27;</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">next</span>(p, c - offset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr[p].len;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tr.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// query写下面</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>



<h3 id="字符串-trie树"><a href="#字符串-trie树" class="headerlink" title="字符串-trie树"></a>字符串-trie树</h3><p>统计字符串数量</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">string str;</span><br><span class="line"><span class="type">int</span> ma[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (!ma[p][u]) &#123;</span><br><span class="line">			ma[p][u] = ++ idx;</span><br><span class="line">		&#125; </span><br><span class="line">		p = ma[p][u];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_s</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; str.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">		<span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (!ma[p][u]) &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = ma[p][u];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="01-tire树"><a href="#01-tire树" class="headerlink" title="01-tire树"></a>01-tire树</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>, M = <span class="number">31</span> * N;</span><br><span class="line"><span class="type">int</span> ma[M][<span class="number">2</span>], a[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_s</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		<span class="type">int</span> u = x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (!ma[p][u]) &#123;</span><br><span class="line">			ma[p][u] = ++ idx;</span><br><span class="line">		&#125;</span><br><span class="line">		p = ma[p][u];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串哈希</title>
    <url>/2023/11/19/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%93%88%E5%B8%8C/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.luogu.com.cn/problem/P3370" >洛谷P3370 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="自然溢出字符串hash-单哈希hash"><a href="#自然溢出字符串hash-单哈希hash" class="headerlink" title="自然溢出字符串hash(单哈希hash)"></a>自然溢出字符串hash(单哈希hash)</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ULL base = <span class="number">131</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">hash</span><span class="params">(std::string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    ULL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        ans = ans * base + (ULL)s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans &amp; <span class="number">0x7fffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::map&lt;ULL, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        ULL z = <span class="built_in">hash</span>(s);</span><br><span class="line">        mp[z] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; mp.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="双模数hash"><a href="#双模数hash" class="headerlink" title="双模数hash"></a>双模数hash</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> ULL base = <span class="number">131</span>;</span><br><span class="line"><span class="type">const</span> ULL mod1 = <span class="number">805306457</span>, mod2 = <span class="number">1610612741</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">hash_1</span><span class="params">(std::string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    ULL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        ans = (ans * base + (ULL)s[i]) % mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ULL <span class="title">hash_2</span><span class="params">(std::string s)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">    ULL ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        ans = (ans * base + (ULL)s[i]) % mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    std::map&lt;std::pair&lt;ULL, ULL&gt;, <span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        std::string s;</span><br><span class="line">        std::cin &gt;&gt; s;</span><br><span class="line">        ULL z1 = <span class="built_in">hash_1</span>(s), z2 = <span class="built_in">hash_2</span>(s);</span><br><span class="line">        mp[&#123;z1, z2&#125;] ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cout &lt;&lt; mp.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构</title>
    <url>/2023/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><ul>
<li><p>区间求和</p>
<p>  数组形式$[1, n]$</p>
</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tr[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// lowbit返回x二进制最后一个1的位置</span></span><br><span class="line">    <span class="comment">// 树状数组中x + lowbit(x) 是x父节点的位置 </span></span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 修改u以及u的负节点（单点修改）</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        tr[i] += x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 查询u以及u的子节点</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = u; i; i -= <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        ans += tr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>​	$struct$版$[0, n)$</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Fenwick</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;T&gt; a;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">Fenwick</span>(<span class="type">int</span> n_ = <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n_);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n_)</span> </span>&#123;</span><br><span class="line">        n = n_;</span><br><span class="line">        a.<span class="built_in">assign</span>(n, T&#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">const</span> T &amp;v)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x + <span class="number">1</span>; i &lt;= n; i += i &amp; -i) &#123;</span><br><span class="line">            a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] + v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function">T <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        T ans&#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt; <span class="number">0</span>; i -= i &amp; -i) &#123;</span><br><span class="line">            ans = ans + a[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function">T <span class="title">rangeSum</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// [l, r)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(r) - <span class="built_in">sum</span>(l);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>



<p>例题：<a class="link"   href="https://www.luogu.com.cn/problem/P3374" >洛谷P3374 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>, <a class="link"   href="https://www.luogu.com.cn/problem/P3368" >P3368 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a><br>$单点修改和区间查询$ 与 $区间修改和单点查询$<br> $query(r)$ 中的查询相当于前缀和中的 $sum[r]$<br>所以，对于区间修改可以按照差分的思想优化, 例如：在 $[l, r]$ 中每个数加上 $x$, 就是 $modify(l, x), modify(r + 1, -x)$</p>
<ul>
<li>区间求最大值，最小值</li>
</ul>
<p><a class="link"   href="https://www.luogu.com.cn/problem/P2880" >洛谷P2880 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], tr_max[N], tr_min[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; (-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 单点修改</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = u; i &lt;= n; i += <span class="built_in">lowbit</span>(i)) &#123;</span><br><span class="line">        tr_max[i] = std::<span class="built_in">max</span>(tr_max[i], x);</span><br><span class="line">        tr_min[i] = std::<span class="built_in">min</span>(tr_min[i], x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_max</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 区间查询最大值</span></span><br><span class="line">    <span class="keyword">if</span> (r &gt; l) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - <span class="built_in">lowbit</span>(r) &gt; l) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">max</span>(tr_max[r], <span class="built_in">query_max</span>(l, r - <span class="built_in">lowbit</span>(r)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">max</span>(a[r], <span class="built_in">query_max</span>(l, r - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query_min</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 区间查询最小值</span></span><br><span class="line">    <span class="keyword">if</span> (r &gt; l) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r - <span class="built_in">lowbit</span>(r) &gt; l) &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">min</span>(tr_min[r], <span class="built_in">query_min</span>(l, r - <span class="built_in">lowbit</span>(r)));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> std::<span class="built_in">min</span>(a[r], <span class="built_in">query_min</span>(l, r - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a[l];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p><a class="link"   href="https://www.luogu.com.cn/problem/P3372" >洛谷P3372 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>区间求和</p>
<ul>
<li>区间为$[1, n]$的线段树</li>
</ul>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> lazy = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    std::vector&lt;Node&gt; tr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        tr.<span class="built_in">resize</span>(<span class="number">4</span> * (n + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge_node</span><span class="params">(Node&amp; res, Node x, Node y)</span> </span>&#123;</span><br><span class="line">        res.sum = x.sum + y.sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">merge_node</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, std::vector&lt;<span class="type">int</span>&gt;&amp; w)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            tr[u].l = tr[u].r = r;</span><br><span class="line">            tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">            tr[u].sum = w[l];</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u].l = l;</span><br><span class="line">        tr[u].r = r;</span><br><span class="line">        tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid, w);</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r, w);</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tr[u].lazy) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].lazy += tr[u].lazy;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].sum += tr[u].lazy * (tr[u &lt;&lt; <span class="number">1</span>].r - tr[u &lt;&lt; <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy += tr[u].lazy;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += tr[u].lazy * (tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l + <span class="number">1</span>);</span><br><span class="line">        tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r) &#123;</span><br><span class="line">            tr[u].lazy += x;</span><br><span class="line">            tr[u].sum += x * (tr[u].r - tr[u].l + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(u); <span class="comment">// 单点修改可去掉</span></span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">            <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r) &#123;</span><br><span class="line">            <span class="keyword">return</span> tr[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(u); <span class="comment">/// 单点修改可去掉</span></span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Node ans;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">            ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">                ans = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Node res = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">                <span class="built_in">merge_node</span>(ans, ans, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>区间为$[0, n)$的线段树</p>
  <div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r; <span class="comment">// 区间为[l, r)</span></span><br><span class="line">    LL sum = <span class="number">0</span>;</span><br><span class="line">    LL lazy = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span> &#123;</span><br><span class="line">    std::vector&lt;Node&gt; tr;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        tr.<span class="built_in">resize</span>(<span class="number">4</span> * (n + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">merge_node</span><span class="params">(Node&amp; res, Node x, Node y)</span> </span>&#123;</span><br><span class="line">        res.sum = x.sum + y.sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">merge_node</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, std::vector&lt;<span class="type">int</span>&gt;&amp; w)</span> </span>&#123; <span class="comment">// 建树区间为[l, r)</span></span><br><span class="line">        tr[u].l = l;</span><br><span class="line">        tr[u].r = r;</span><br><span class="line">        <span class="keyword">if</span> (r - l == <span class="number">1</span>) &#123;</span><br><span class="line">            tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">            tr[u].sum = w[l];</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid, w);</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid, r, w);</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tr[u].lazy) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].lazy += tr[u].lazy;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span>].sum += tr[u].lazy * (tr[u &lt;&lt; <span class="number">1</span>].r - tr[u &lt;&lt; <span class="number">1</span>].l);</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy += tr[u].lazy;</span><br><span class="line">        tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].sum += tr[u].lazy * (tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].r - tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].l);</span><br><span class="line">        tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123; <span class="comment">// 修改区间为[l, r)</span></span><br><span class="line">        <span class="keyword">if</span> (tr[u].l &gt;= r || tr[u].r &lt;= l) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line">            tr[u].lazy += x;</span><br><span class="line">            tr[u].sum += x * (tr[u].r - tr[u].l);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(u); <span class="comment">// 单点修改可去掉</span></span><br><span class="line">        <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, x);</span><br><span class="line">        <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, x);</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123; <span class="comment">// 查询区间为[l, r)</span></span><br><span class="line">        <span class="keyword">if</span> (tr[u].l &gt;= r || tr[u].r &lt;= l) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Node</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &lt;= tr[u].l &amp;&amp; r &gt;= tr[u].r) &#123;</span><br><span class="line">            <span class="keyword">return</span> tr[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(u); <span class="comment">// 单点修改可去掉</span></span><br><span class="line">        Node ans;</span><br><span class="line">        <span class="built_in">merge_node</span>(ans, <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r), <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r));</span><br><span class="line">        <span class="built_in">push_up</span>(u);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h3><p><a class="link"   href="https://www.luogu.com.cn/problem/P1502" >洛谷P1502 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, W, H;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r, h;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">&#125; mat[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> lazy;</span><br><span class="line">    <span class="type">int</span> maxx;</span><br><span class="line">&#125; tr[N &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; all;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    all.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">memset</span>(mat, <span class="number">0</span>, <span class="keyword">sizeof</span> mat);</span><br><span class="line">    <span class="built_in">memset</span>(tr, <span class="number">0</span>, <span class="keyword">sizeof</span> tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = all.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (all[mid] &gt;= x) &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].maxx = std::<span class="built_in">max</span>(tr[u &lt;&lt; <span class="number">1</span>].maxx, tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[u].l = l, tr[u].r = r;</span><br><span class="line">        tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">        tr[u].maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tr[u].l = l, tr[u].r = r;</span><br><span class="line">    tr[u].lazy = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u &lt;&lt; <span class="number">1</span>].maxx += tr[u].lazy;</span><br><span class="line">    tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].maxx += tr[u].lazy;</span><br><span class="line">    tr[u &lt;&lt; <span class="number">1</span>].lazy += tr[u].lazy;</span><br><span class="line">    tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy += tr[u].lazy;</span><br><span class="line">    tr[u].lazy = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) &#123;</span><br><span class="line">        tr[u].maxx += w;</span><br><span class="line">        tr[u].lazy += w;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = (tr[u].l + tr[u].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, l, r, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r &gt; mid) &#123;</span><br><span class="line">        <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line"></span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; H &gt;&gt; W;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, l;</span><br><span class="line">        std::cin &gt;&gt; x &gt;&gt; y &gt;&gt; l;</span><br><span class="line">        mat[(i &lt;&lt; <span class="number">1</span>) - <span class="number">1</span>] = &#123;y, y + W - <span class="number">1</span>, x, l&#125;;</span><br><span class="line">        mat[(i &lt;&lt; <span class="number">1</span>)] = &#123;y, y + W - <span class="number">1</span>, x + H - <span class="number">1</span>, -l&#125;;</span><br><span class="line">        all.<span class="built_in">push_back</span>(y);</span><br><span class="line">        all.<span class="built_in">push_back</span>(y + W - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">sort</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>());</span><br><span class="line">    std::<span class="built_in">sort</span>(mat + <span class="number">1</span>, mat + n + <span class="number">1</span>, [&amp;](matrix a, matrix b) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.h == b.h) &#123;</span><br><span class="line">            <span class="keyword">return</span> a.val &gt; b.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> a.h &lt; b.h;</span><br><span class="line">    &#125;);</span><br><span class="line">    all.<span class="built_in">erase</span>(std::<span class="built_in">unique</span>(all.<span class="built_in">begin</span>(), all.<span class="built_in">end</span>()), all.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> l1 = <span class="built_in">find</span>(mat[i].l);</span><br><span class="line">        <span class="type">int</span> r1 = <span class="built_in">find</span>(mat[i].r);</span><br><span class="line">        std::cerr &lt;&lt; l1 &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; r1 &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        mat[i].l = l1;</span><br><span class="line">        mat[i].r = r1;</span><br><span class="line">    &#125;</span><br><span class="line">    std::cerr &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, all.<span class="built_in">size</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, mat[i].l, mat[i].r, mat[i].val);</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, tr[<span class="number">1</span>].maxx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h3><p><a class="link"   href="https://www.luogu.com.cn/problem/P3369" >洛谷P3369 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>, range = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">&#125; tr[N * <span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> root[N], idx = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tr[u].l) &#123;</span><br><span class="line">        tr[u].l = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!tr[u].r) &#123;</span><br><span class="line">        tr[u].r = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].cnt = tr[tr[u].l].cnt + tr[tr[u].r].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> pos, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[u].cnt += value;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) &#123;</span><br><span class="line">        <span class="built_in">modify</span>(tr[u].l, l, mid, pos, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">modify</span>(tr[u].r, mid + <span class="number">1</span>, r, pos, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> pos, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>, -range, range, pos, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">add</span>(x, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query1</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> L, <span class="type">int</span> R)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L &lt;= l &amp;&amp; R &gt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[u].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (l &gt; R || r &lt; L) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_down</span>(u);</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query1</span>(tr[u].l, l, mid, L, R) + <span class="built_in">query1</span>(tr[u].r, mid + <span class="number">1</span>, r, L, R);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query2</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= tr[tr[u].l].cnt) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query2</span>(tr[u].l, l, mid, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query2</span>(tr[u].r, mid + <span class="number">1</span>, r, x - tr[tr[u].l].cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query3</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">query1</span>(<span class="number">1</span>, -range, range, -range, x - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query2</span>(<span class="number">1</span>, -range, range, t); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query4</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="built_in">query1</span>(<span class="number">1</span>, -range, range, -range, x) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query2</span>(<span class="number">1</span>, -range, range, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> op, x;</span><br><span class="line">        std::cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">insert</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">remove</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">query1</span>(<span class="number">1</span>, -range, range, -range, x - <span class="number">1</span>) + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">query2</span>(<span class="number">1</span>, -range, range, x) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">query3</span>(x) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">query4</span>(x) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h3><h4 id="可持久化线段树-1"><a href="#可持久化线段树-1" class="headerlink" title="可持久化线段树 $(1)$"></a>可持久化线段树 $(1)$</h4><p><a class="link"   href="https://www.luogu.com.cn/problem/P3919" >洛谷P3919 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">&#125; tr[N * <span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> root[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++ idx;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[p].val = a[l];</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].val = <span class="number">0</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid);</span><br><span class="line">    tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> loc, <span class="type">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++ idx;</span><br><span class="line">    tr[p] = tr[u];</span><br><span class="line">    <span class="keyword">if</span> (l == r &amp;&amp; l == loc) &#123;</span><br><span class="line">        tr[p].val = value;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (loc &lt;= mid) &#123;</span><br><span class="line">        tr[p].l = <span class="built_in">modify</span>(tr[u].l, l, mid, loc, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[p].r = <span class="built_in">modify</span>(tr[u].r, mid + <span class="number">1</span>, r, loc, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> loc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r &amp;&amp; l == loc) &#123;</span><br><span class="line">        <span class="keyword">return</span> tr[u].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (loc &lt;= mid) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tr[u].l, l, mid, loc);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tr[u].r, mid + <span class="number">1</span>, r, loc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> v, op, loc, value;</span><br><span class="line">        std::cin &gt;&gt; v &gt;&gt; op &gt;&gt; loc;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            std::cin &gt;&gt; value;</span><br><span class="line">            root[i] = <span class="built_in">modify</span>(root[v], <span class="number">1</span>, n, loc, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root[i] = root[v];</span><br><span class="line">            std::cout &lt;&lt; <span class="built_in">query</span>(root[v], <span class="number">1</span>, n, loc) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="可持久化线段树-2"><a href="#可持久化线段树-2" class="headerlink" title="可持久化线段树 $(2)$"></a>可持久化线段树 $(2)$</h4><p><a class="link"   href="https://www.luogu.com.cn/problem/P3834" >洛谷P3834 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 离线主席树</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> cnt;</span><br><span class="line">&#125; tr[N * <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> root[N], idx;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; nums;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> std::<span class="built_in">lower_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), x) - nums.<span class="built_in">begin</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].cnt = tr[tr[u].l].cnt + tr[tr[u].r].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++ idx;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[p].cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid);</span><br><span class="line">    tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++ idx;</span><br><span class="line">    tr[p] = tr[u];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[p].cnt ++ ;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        tr[p].l = <span class="built_in">modify</span>(tr[u].l, l, mid, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[p].r = <span class="built_in">modify</span>(tr[u].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> q, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> count = tr[tr[q].l].cnt - tr[tr[p].l].cnt;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= count) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tr[p].l, tr[q].l, l, mid, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tr[p].r, tr[q].r, mid + <span class="number">1</span>, r, x - count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        nums.<span class="built_in">push_back</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 离散化</span></span><br><span class="line">    std::<span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">    nums.<span class="built_in">erase</span>(std::<span class="built_in">unique</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>()), nums.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cn = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, cn);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        root[i] = <span class="built_in">modify</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, cn, <span class="built_in">find</span>(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r, k;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class="line">        std::cout &lt;&lt; nums[<span class="built_in">query</span>(root[l - <span class="number">1</span>], root[r], <span class="number">0</span>, cn, k)] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 二分在线版（XyeeCheng）</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">&#125; tree[M * <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ls(x) (tree[x].l)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rs(x) (tree[x].r)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> sum(x) tree[x].sum</span></span><br><span class="line"><span class="type">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> root[N], a[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sum</span>(x) = <span class="built_in">sum</span>(<span class="built_in">ls</span>(x)) + <span class="built_in">sum</span>(<span class="built_in">rs</span>(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> last, <span class="type">int</span> now, <span class="type">int</span> pos, <span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//过去的节点 现在的节点 修改的位置，k ，当前节点表示的区间[l,r]</span></span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sum</span>(now) = <span class="built_in">sum</span>(last) + k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ls</span>(now) = <span class="built_in">ls</span>(last), <span class="built_in">rs</span>(now) = <span class="built_in">rs</span>(last);</span><br><span class="line">        <span class="type">int</span> mid = (l + r - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (pos &lt;= mid)</span><br><span class="line">            <span class="built_in">ls</span>(now) = ++tot, <span class="built_in">update</span>(<span class="built_in">ls</span>(last), <span class="built_in">ls</span>(now), pos, k, l, mid);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">rs</span>(now) = ++tot, <span class="built_in">update</span>(<span class="built_in">rs</span>(last), <span class="built_in">rs</span>(now), pos, k, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> up = <span class="number">1e9</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> down = -(<span class="number">1e9</span> + <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> last, <span class="type">int</span> now, <span class="type">int</span> pos, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">update</span>(last, now, pos, k, down, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> last, <span class="type">int</span> now, <span class="type">int</span> k, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="type">int</span> mid = (l + r - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> val = <span class="built_in">sum</span>(<span class="built_in">ls</span>(now)) - <span class="built_in">sum</span>(<span class="built_in">ls</span>(last));</span><br><span class="line">    <span class="keyword">if</span> (val &gt;= k)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">kth</span>(<span class="built_in">ls</span>(last), <span class="built_in">ls</span>(now), k, l, mid);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">kth</span>(<span class="built_in">rs</span>(last), <span class="built_in">rs</span>(now), k - val, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> last, <span class="type">int</span> now, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">kth</span>(last, now, k, down, up);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        root[i] = ++tot;</span><br><span class="line">        <span class="built_in">update</span>(root[i - <span class="number">1</span>], root[i], a[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> L, R, k;</span><br><span class="line">        cin &gt;&gt; L &gt;&gt; R &gt;&gt; k;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">kth</span>(root[L - <span class="number">1</span>], root[R], k) &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="可持久化线段树-3"><a href="#可持久化线段树-3" class="headerlink" title="可持久化线段树 $(3)$"></a>可持久化线段树 $(3)$</h4><p>求区间mex</p>
<p><a class="link"   href="https://www.luogu.com.cn/problem/P4137" >洛谷P4137 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> minn;</span><br><span class="line">&#125; tr[N * <span class="number">30</span>];</span><br><span class="line"><span class="type">int</span> root[N], idx;</span><br><span class="line"><span class="type">int</span> a[N], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">    tr[u].minn = std::<span class="built_in">min</span>(tr[tr[u].l].minn, tr[tr[u].r].minn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++ idx;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[p].minn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tr[p].l = <span class="built_in">build</span>(l, mid);</span><br><span class="line">    tr[p].r = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> p = ++ idx;</span><br><span class="line">    tr[p] = tr[u];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        tr[p].minn = t;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) &#123;</span><br><span class="line">        tr[p].l = <span class="built_in">modify</span>(tr[u].l, l, mid, x, t);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[p].r = <span class="built_in">modify</span>(tr[u].r, mid + <span class="number">1</span>, r, x, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; tr[tr[u].l].minn) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tr[u].l, l, mid, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(tr[u].r, mid + <span class="number">1</span>, r, x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">push_up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="type">int</span> z = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        std::cin &gt;&gt; a[i];</span><br><span class="line">        z = std::<span class="built_in">max</span>(z, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    root[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">0</span>, z + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        root[i] = <span class="built_in">modify</span>(root[i - <span class="number">1</span>], <span class="number">0</span>, z + <span class="number">1</span>, a[i], i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        std::cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        std::cout &lt;&lt; <span class="built_in">query</span>(root[r], <span class="number">0</span>, z + <span class="number">1</span>, l) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>重链剖分</title>
    <url>/2024/02/26/%E9%87%8D%E9%93%BE%E5%89%96%E5%88%86/</url>
    <content><![CDATA[<h3 id="重链剖分"><a href="#重链剖分" class="headerlink" title="重链剖分"></a>重链剖分</h3><p><a class="link"   href="https://www.luogu.com.cn/problem/P3384" >洛谷P3384：重链剖分加线段树 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<ul>
<li><p>重儿子：父亲节点的所有儿子中子树结点数目最多（size最大）的结点；</p>
</li>
<li><p>轻儿子：父亲节点中除了重儿子以外的儿子；</p>
</li>
<li><p>重边：父亲结点和重儿子连成的边；</p>
</li>
<li><p>轻边：父亲节点和轻儿子连成的边；</p>
</li>
<li><p>重链：由多条重边连接而成的路径；</p>
</li>
<li><p>轻链：由多条轻边连接而成的路径；</p>
</li>
<li><p>$siz$ : 树的大小</p>
</li>
<li><p>$dep$ : 点的深度</p>
</li>
<li><p>$top$ : 点重链的链头，如果是轻链则是本身</p>
</li>
<li><p>$praent$ : 点的父亲节点</p>
</li>
<li><p>$in$ : 点的进入时间(第一次出现的dfs序)</p>
</li>
<li><p>$out$ : 点的出去时间(最后一次出现的dfs序)</p>
</li>
<li><p>$seq$ : $in$对应的点</p>
</li>
<li><p>$adj$ : 为邻接表，第一个是重儿子</p>
</li>
</ul>
<p>如果为边权，需要边权转点权，即将边权给予远离根的节点，计算边权之和时去掉转后的点权去掉$lca$即可</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HLD</span> &#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; siz, top, dep, parent, in, out, seq;</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; adj;</span><br><span class="line">    <span class="type">int</span> cur;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">HLD</span>() &#123;&#125;</span><br><span class="line">    <span class="built_in">HLD</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        siz.<span class="built_in">resize</span>(n);</span><br><span class="line">        top.<span class="built_in">resize</span>(n);</span><br><span class="line">        dep.<span class="built_in">resize</span>(n);</span><br><span class="line">        parent.<span class="built_in">resize</span>(n);</span><br><span class="line">        in.<span class="built_in">resize</span>(n);</span><br><span class="line">        out.<span class="built_in">resize</span>(n);</span><br><span class="line">        seq.<span class="built_in">resize</span>(n);</span><br><span class="line">        cur = <span class="number">0</span>;</span><br><span class="line">        adj.<span class="built_in">assign</span>(n, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">addEdge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123;</span><br><span class="line">        adj[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        adj[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">int</span> root = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        top[root] = root;</span><br><span class="line">        dep[root] = <span class="number">0</span>;</span><br><span class="line">        parent[root] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(root);</span><br><span class="line">        <span class="built_in">dfs2</span>(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parent[u] != <span class="number">-1</span>) &#123;</span><br><span class="line">            adj[u].<span class="built_in">erase</span>(std::<span class="built_in">find</span>(adj[u].<span class="built_in">begin</span>(), adj[u].<span class="built_in">end</span>(), parent[u]));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        siz[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;v : adj[u]) &#123;</span><br><span class="line">            parent[v] = u;</span><br><span class="line">            dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs1</span>(v);</span><br><span class="line">            siz[u] += siz[v];</span><br><span class="line">            <span class="keyword">if</span> (siz[v] &gt; siz[adj[u][<span class="number">0</span>]]) &#123;</span><br><span class="line">                std::<span class="built_in">swap</span>(v, adj[u][<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">        in[u] = cur++;</span><br><span class="line">        seq[in[u]] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> v : adj[u]) &#123;</span><br><span class="line">            top[v] = v == adj[u][<span class="number">0</span>] ? top[u] : v;</span><br><span class="line">            <span class="built_in">dfs2</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">        out[u] = cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123; <span class="comment">// 最近公共祖先</span></span><br><span class="line">        <span class="keyword">while</span> (top[u] != top[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dep[top[u]] &gt; dep[top[v]]) &#123;</span><br><span class="line">                u = parent[top[u]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                v = parent[top[v]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dep[u] &lt; dep[v] ? u : v;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dist</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123; <span class="comment">// 两点间的距离</span></span><br><span class="line">        <span class="keyword">return</span> dep[u] + dep[v] - <span class="number">2</span> * dep[<span class="built_in">lca</span>(u, v)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jump</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> k)</span> </span>&#123; <span class="comment">// u点向上跳k步到达的点</span></span><br><span class="line">        <span class="keyword">if</span> (dep[u] &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> d = dep[u] - k;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (dep[top[u]] &gt; d) &#123;</span><br><span class="line">            u = parent[top[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> seq[in[u] - dep[u] + d];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isAncester</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123; <span class="comment">// u是否是v的祖先节点</span></span><br><span class="line">        <span class="keyword">return</span> in[u] &lt;= in[v] &amp;&amp; in[v] &lt; out[u];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedParent</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123; <span class="comment">// 以v为跟的树中u节点的父节点</span></span><br><span class="line">        std::<span class="built_in">swap</span>(u, v);</span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isAncester</span>(u, v)) &#123;</span><br><span class="line">            <span class="keyword">return</span> parent[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it = std::<span class="built_in">upper_bound</span>(adj[u].<span class="built_in">begin</span>(), adj[u].<span class="built_in">end</span>(), v, [&amp;](<span class="type">int</span> x, <span class="type">int</span> y) &#123;</span><br><span class="line">            <span class="keyword">return</span> in[x] &lt; in[y];</span><br><span class="line">        &#125;) - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> *it;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedSize</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span> </span>&#123; <span class="comment">// 以u为根的树中v子树的大小</span></span><br><span class="line">        <span class="keyword">if</span> (u == v) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isAncester</span>(v, u)) &#123;</span><br><span class="line">            <span class="keyword">return</span> siz[v];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n - siz[<span class="built_in">rootedParent</span>(u, v)];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rootedLca</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123; <span class="comment">// (a, b, c)的最近公共祖先</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">lca</span>(a, b) ^ <span class="built_in">lca</span>(b, c) ^ <span class="built_in">lca</span>(c, a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂 &amp;&amp; 求逆元 &amp;&amp; 求组合数</title>
    <url>/2024/01/22/%E5%BF%AB%E9%80%9F%E5%B9%82-%E6%B1%82%E9%80%86%E5%85%83/</url>
    <content><![CDATA[<h3 id="快速幂-逆元-求组合数-模数固定，且a-b不大"><a href="#快速幂-逆元-求组合数-模数固定，且a-b不大" class="headerlink" title="快速幂 &amp;&amp; 逆元 &amp;&amp; 求组合数(模数固定，且a, b不大)"></a>快速幂 &amp;&amp; 逆元 &amp;&amp; 求组合数(模数固定，且a, b不大)</h3><div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * a % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x, LL p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Comb</span> &#123;</span><br><span class="line">    LL n;</span><br><span class="line">    std::vector&lt;LL&gt; _fac, _invfac, _inv;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Comb</span>() : n&#123;<span class="number">0</span>&#125;, _fac&#123;<span class="number">1</span>&#125;, _invfac&#123;<span class="number">1</span>&#125;, _inv&#123;<span class="number">0</span>&#125; &#123;&#125;</span><br><span class="line">    <span class="built_in">Comb</span>(LL n) : <span class="built_in">Comb</span>() &#123;</span><br><span class="line">        <span class="built_in">init</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(LL m)</span> </span>&#123;</span><br><span class="line">        m = std::<span class="built_in">min</span>(m, mod - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (m &lt;= n) &#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        _fac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _invfac.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line">        _inv.<span class="built_in">resize</span>(m + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (LL i = n + <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">            _fac[i] = _fac[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _invfac[m] = <span class="built_in">inv</span>(_fac[m]);</span><br><span class="line">        <span class="keyword">for</span> (LL i = m; i &gt; n; i--) &#123;</span><br><span class="line">            _invfac[i - <span class="number">1</span>] = _invfac[i] * i % mod;</span><br><span class="line">            _inv[i] = _invfac[i] * _fac[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        n = m;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">get_fac</span><span class="params">(LL m)</span> </span>&#123; <span class="comment">// m的阶层</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _fac[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">get_invfac</span><span class="params">(LL m)</span> </span>&#123; <span class="comment">// m的阶层的逆元</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _invfac[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">get_inv</span><span class="params">(LL m)</span> </span>&#123; <span class="comment">// m的逆元</span></span><br><span class="line">        <span class="keyword">if</span> (m &gt; n) &#123;</span><br><span class="line">            <span class="built_in">init</span>(<span class="number">2</span> * m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _inv[m];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">LL <span class="title">binom</span><span class="params">(LL n, LL m)</span> </span>&#123; <span class="comment">// C(n, m);</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; m || m &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LL res = <span class="built_in">get_fac</span>(n) * <span class="built_in">get_invfac</span>(m) % mod * <span class="built_in">get_invfac</span>(n - m) % mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; comb;</span><br></pre></td></tr></table></figure></div>

<h3 id="lucas求组合数"><a href="#lucas求组合数" class="headerlink" title="lucas求组合数"></a>lucas求组合数</h3><p>时间复杂度与模数相关 $O(log_p(plogp))$</p>
<p>适用于模数不同且$C_{a}^{b}$中$a, b$很大的情况</p>
<div class="highlight-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> LL mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL a, LL b)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * a % mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % mod;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">power</span><span class="params">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (b) &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            res = res * a % p;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a * a % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(x, mod - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">inv</span><span class="params">(LL x, LL p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">power</span>(x, p - <span class="number">2</span>, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = a; i &lt;= b; i++, j--) &#123;</span><br><span class="line">        res = res * j % p;</span><br><span class="line">        res = res * <span class="built_in">inv</span>(i, p) % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">lucas</span><span class="params">(LL a, LL b, LL p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">C</span>(a, b, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">C</span>(a % p, b % p, p) * <span class="built_in">lucas</span>(a / p, b / p, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>acm</tag>
      </tags>
  </entry>
</search>
